apply plugin: 'jacoco'

jacoco {
    toolVersion '0.8.7'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {

    (android.hasProperty('applicationVariants') ? android.'applicationVariants' : android.'libraryVariants')
            .all { variant ->
                def variantName = variant.name
                def capVariantName = variantName.capitalize()
                def testTaskName = "test${capVariantName}UnitTest"
                tasks.create(name: "${variantName}Coverage", type: JacocoReport, dependsOn: [testTaskName, "connectedCheck"]) {

                    group = "Reporting"
                    description = "Generate Jacoco coverage reports for the ${variantName} build."

                    reports {
                        html.enabled(true)
                        xml.enabled(true)
                        csv.enabled(true)
                    }

                    def excludes = [
                            '**/R.class',
                            '**/R$*.class',
                            '**/BuildConfig.*',
                            '**/Manifest*.*',
                            '**/*Test*.*',
                            'android/**/*.*',
                            'androidx/**/*.*',
                            '**/*$ViewInjector*.*',
                            '**/*Dagger*.*',
                            '**/*MembersInjector*.*',
                            '**/*_Factory.*',
                            '**/*_Provide*Factory*.*',
                            '**/*_ViewBinding*.*',
                            '**/AutoValue_*.*',
                            '**/R2.class',
                            '**/R2$*.class',
                            '**/*Directions$*',
                            '**/*Directions.*',
                            '**/*Binding.*'
                    ]

                    def jClasses = "${project.buildDir}/intermediates/javac/${variantName}/classes"
                    def kClasses = "${project.buildDir}/tmp/kotlin-classes/${variantName}"
                    def javaClasses = fileTree(dir: jClasses, excludes: excludes)

                    def kotlinClasses = fileTree(dir: kClasses, excludes: excludes)

                    classDirectories.from = files([javaClasses, kotlinClasses])
                    def sourceDirs = ["${project.projectDir}/src/main/java", "${project.projectDir}/src/main/kotlin",
                                      "${project.projectDir}/src/${variantName}/java", "${project.projectDir}/src/${variantName}/kotlin"]

                    sourceDirectories.from = files(sourceDirs)

                    def androidTestsData = fileTree(dir: "${buildDir}/outputs/code_coverage/${variantName}AndroidTests/connected/", includes: ["**/*.ec"])

                    executionData.from = files(["${project.buildDir}/jacoco/${testTaskName}.exec", androidTestsData])
                }
            }

    tasks.register('coverAllVariants') {
        dependsOn(provider {
            tasks.findAll { task -> task.name.endsWith('Coverage') }
        })
    }
}
